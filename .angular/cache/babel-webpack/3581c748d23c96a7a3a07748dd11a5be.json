{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/maher/Documents/certif/ng-certification/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/maher/Documents/certif/ng-certification/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/maher/Documents/certif/ng-certification/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { Weather } from '../models/weather.model';\nimport { Const } from '../utils/const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var WeatherService = /*#__PURE__*/(function () {\n  var WeatherService = /*#__PURE__*/function () {\n    function WeatherService(http) {\n      _classCallCheck(this, WeatherService);\n\n      this.http = http;\n    }\n\n    _createClass(WeatherService, [{\n      key: \"getCurrentWeather\",\n      value: function getCurrentWeather(zipCode) {\n        // Setup log namespace query parameter\n        var params = new HttpParams().set('zip', zipCode.toString()).set('appid', Const.APP_ID);\n        return this.http.get(Const.URL_TODAY_WEATHER, {\n          params: params\n        }).pipe(map(function (res) {\n          var weather = new Weather();\n          weather.date = new Date(res['dt'] * 1000);\n          weather.maxTemp = res['main']['temp_max'];\n          weather.minTemp = res['main']['temp_min'];\n          weather.temp = res['main']['temp'];\n          weather.weatherCondition = res['weather'][0]['main'];\n          weather.city = res['name'];\n          weather.zipCode = zipCode;\n          return weather;\n        }));\n      }\n    }, {\n      key: \"getForecastWeather\",\n      value: function getForecastWeather(zipCode) {\n        // Setup log namespace query parameter\n        var params = new HttpParams().set('zip', zipCode.toString()).set('appid', Const.APP_ID);\n        return this.http.get(Const.URL_FORECAST_WEATHER, {\n          params: params\n        }).pipe(map(function (res) {\n          var weathers = [];\n\n          var _iterator = _createForOfIteratorHelper(res['list']),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var element = _step.value;\n              var weather = new Weather();\n              weather.date = new Date(element['dt'] * 1000);\n              weather.maxTemp = element['main']['temp_max'];\n              weather.minTemp = element['main']['temp_min'];\n              weather.temp = element['main']['temp'];\n              weather.weatherCondition = element['weather'][0]['main'];\n              weather.city = element['name'];\n              weather.zipCode = zipCode;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return weathers;\n        }));\n      }\n    }]);\n\n    return WeatherService;\n  }();\n\n  WeatherService.ɵfac = function WeatherService_Factory(t) {\n    return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeatherService,\n    factory: WeatherService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeatherService;\n})();","map":null,"metadata":{},"sourceType":"module"}